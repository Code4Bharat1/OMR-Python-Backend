version: '3.8'

services:
  omr-api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - WAITRESS_THREADS=4
      - WAITRESS_CONNECTION_LIMIT=1000
      - WAITRESS_CLEANUP_INTERVAL=30
      - WAITRESS_CHANNEL_TIMEOUT=120
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./templates:/app/templates
      - ./static:/app/static
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Development mode service (optional)
  omr-api-dev:
    build: .
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - HOST=0.0.0.0
      - PORT=8000
      - PYTHONUNBUFFERED=1
    volumes:
      - .:/app  # Mount source code for development
    profiles:
      - dev  # Use with: docker-compose --profile dev up
    command: ["python", "app.py"]

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates if needed
    depends_on:
      - omr-api
    restart: unless-stopped
    profiles:
      - nginx  # Use with: docker-compose --profile nginx up